package bitcamp.java110.cms.dao.impl;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import bitcamp.java110.cms.annotation.Component;
import bitcamp.java110.cms.dao.DaoException;
import bitcamp.java110.cms.dao.StudentDao;
import bitcamp.java110.cms.domain.Student;
@Component
public class StudentJdbcDao implements StudentDao{

    private List<Student> list = new ArrayList<>();

    public int insert(Student Student) {

        Connection con = null;
        Statement stmt = null;

        try {
            Class.forName("org.mariadb.jdbc.Driver");
            con =  DriverManager.getConnection(
                    "jdbc:mariadb://localhost:3306/studydb",
                    "study","1111");
            
            //매니저 정보를 입력할 대 p1_memb 테이블과 p1_mgr 테이블에
            // 매니저 정보를 분산 입력해야 한다.
            // 두 테이블에 모두 입력 성공할 때 입력을 완료하도록 
            // 두 insert를 한 작업(transaction)으로 묶는다.
            // SQL을 서버에 보낸 후 클라이언트가 최종적 완료 신호를
            // 보내기 전까지는 처리를 보류하도록 설정한다.
            con.setAutoCommit(false);
            
            stmt = con.createStatement();
            String sql = "insert into p1_memb (name,email,pwd, tel,cdt)"
                    + " values ('" + Student.getName()
                    + "','" + Student.getEmail() 
                    + "',password('" + Student.getPassword() 
                    + "'),'" + Student.getTel()
                    + "',now())";
            
            System.out.println("============ sql1");
            System.out.println(sql);
            // p1_memb 테이블에 회원 기본 정보를 입력 한 후
            // 자동으로 생성된 회원 번호를 리턴 받는다.
            stmt.executeUpdate(sql, Statement.RETURN_GENERATED_KEYS);
            
            // insert를 실행한 후 리턴 받은 자동증가 PK값을 꺼내기.
            ResultSet autoGeneratedKeys = stmt.getGeneratedKeys();
            autoGeneratedKeys.next();
            int memberNo = autoGeneratedKeys.getInt(1);
            autoGeneratedKeys.close();
            
            // 회원 번호로 매니저 테이블에 직위 정보를 입력한다.
            
            String sql2 = "insert into p1_stud(sno,schl,work)"
                    + " values(" + memberNo
                    + ",'" + Student.getSchool()
                    + "','" + ((Student.isWorking())?'Y':'N')
                    + "')";
            System.out.println("============ sql2");
            System.out.println(sql2);
            stmt.executeUpdate(sql2);
            
            // 두 insert가 모두 성공했을때만 서버에 완료 신호를 보낸다.
            con.commit();
            return 1;

        }catch(Exception e) {
            throw new DaoException(e);
        }finally {

            try {stmt.close();} catch (SQLException e) {}
            try {con.close();} catch (SQLException e) {}
        }
    }

    public List<Student> findAll() {

        List<Student> list = new ArrayList<>();
        Connection con = null;
        Statement stmt = null;
        ResultSet rs = null;

        try {

            // Java.sql.Driver 구현체를 로딩한다.
            // 해당 클래스의 객체를 만들어 DriverStudent에 등록한다.
            Class.forName("org.mariadb.jdbc.Driver");

            //DriverStudent.registerDriver(new org.mariadb.jdbc.Driver());

            //DriverStudent에게 java.sql.Connection 객체를 요구한다.
            //DriverStudent는 등록된 Driver 들 중에서 요구 사항에 맞는
            //  드라이버를 찾아 connect()를 호출한다.
            //  그리고 connect() 매서드의 리턴값을 그대로 리턴해준다.

            con =  DriverManager.getConnection("jdbc:mariadb://localhost:3306/studydb",
                    "study","1111");
            // 질의문을 작성할 객체를 준비한다.
            stmt = con.createStatement();

            // select 질의를 한다.
            /*

              select m.name, m.email, mr.posi from p1_mgr mr inner join p1_memb m on mr.mrno = m.mno;
              select m.name, m.email, mr.posi from p1_mgr mr right outer join p1_memb m on mr.mrno = m.mno;

             */
            rs = stmt.executeQuery(
                    "select"
                            + " m.mno,"
                            + " m.name, "
                            + " m.email, "
                            + " st.schl, "
                            + " st.work "
                            + " from p1_stud st "
                            + " inner join p1_memb m on st.sno = m.mno");
            // 서버에 생성된 질의 결과를 한개씩 가져 온다.

            while (rs.next()) {
                Student mgr = new Student();
                mgr.setNo(rs.getInt("mno"));
                mgr.setEmail(rs.getString("email"));
                mgr.setName(rs.getString("name"));
                mgr.setSchool(rs.getString("schl"));
                mgr.setWorking((rs.getString("work")=="Y"?true:false));
                list.add(mgr);
            }

        }catch(Exception e) {

            throw new DaoException(e);
        }finally {
            try {rs.close();} catch (SQLException e) {}
            try {stmt.close();} catch (SQLException e) {}
            try {con.close();} catch (SQLException e) {}
        }

        return list;    

    }

    public Student findByEmail(String email) {
        Connection con = null;
        Statement stmt = null;
        ResultSet rs = null;

        try {

            // Java.sql.Driver 구현체를 로딩한다.
            // 해당 클래스의 객체를 만들어 DriverStudent에 등록한다.
            Class.forName("org.mariadb.jdbc.Driver");

            //DriverStudent.registerDriver(new org.mariadb.jdbc.Driver());

            //DriverStudent에게 java.sql.Connection 객체를 요구한다.
            //DriverStudent는 등록된 Driver 들 중에서 요구 사항에 맞는
            //  드라이버를 찾아 connect()를 호출한다.
            //  그리고 connect() 매서드의 리턴값을 그대로 리턴해준다.

            con =  DriverManager.getConnection("jdbc:mariadb://localhost:3306/studydb",
                    "study","1111");
            // 질의문을 작성할 객체를 준비한다.
            stmt = con.createStatement();

            // select 질의를 한다.
            /*

              select m.name, m.email, mr.posi from p1_mgr mr inner join p1_memb m on mr.mrno = m.mno;
              select m.name, m.email, mr.posi from p1_mgr mr right outer join p1_memb m on mr.mrno = m.mno;

             */
            rs = stmt.executeQuery(
                    "select"
                            + " m.mno,"
                            + " m.name, "
                            + " m.email, "
                            + " m.tel, "
                            + " st.schl, "
                            + " st.work "
                            + " from p1_stud st "
                            + " inner join p1_memb m on st.sno = m.mno"
                            + " where m.email = '" + email + "'");
            
            // 서버에 생성된 질의 결과를 한개씩 가져 온다.

            if (rs.next()) {
                Student mgr = new Student();
                mgr.setNo(rs.getInt("mno"));
                mgr.setEmail(rs.getString("email"));
                mgr.setName(rs.getString("name"));
                mgr.setTel(rs.getString("tel"));
                mgr.setSchool(rs.getString("schl"));
                mgr.setWorking((rs.getString("work")=="Y"?true:false));
                return mgr;
            }

            return null;
        }catch(Exception e) {

            throw new DaoException(e);
        }finally {
            try {rs.close();} catch (SQLException e) {}
            try {stmt.close();} catch (SQLException e) {}
            try {con.close();} catch (SQLException e) {}
        }
    }

    public Student findByNo(int no) {
        Connection con = null;
        Statement stmt = null;
        ResultSet rs = null;

        try {

            // Java.sql.Driver 구현체를 로딩한다.
            // 해당 클래스의 객체를 만들어 DriverStudent에 등록한다.
            Class.forName("org.mariadb.jdbc.Driver");

            //DriverStudent.registerDriver(new org.mariadb.jdbc.Driver());

            //DriverStudent에게 java.sql.Connection 객체를 요구한다.
            //DriverStudent는 등록된 Driver 들 중에서 요구 사항에 맞는
            //  드라이버를 찾아 connect()를 호출한다.
            //  그리고 connect() 매서드의 리턴값을 그대로 리턴해준다.

            con =  DriverManager.getConnection("jdbc:mariadb://localhost:3306/studydb",
                    "study","1111");
            // 질의문을 작성할 객체를 준비한다.
            stmt = con.createStatement();

            // select 질의를 한다.
            /*

              select m.name, m.email, mr.posi from p1_mgr mr inner join p1_memb m on mr.mrno = m.mno;
              select m.name, m.email, mr.posi from p1_mgr mr right outer join p1_memb m on mr.mrno = m.mno;

             */
            rs = stmt.executeQuery(
                    "select"
                            + " m.mno,"
                            + " m.name, "
                            + " m.email, "
                            + " m.tel, "
                            + " st.schl, "
                            + " st.work "
                            + " from p1_stud st "
                            + " inner join p1_memb m on st.sno = m.mno"
                            + " where m.mno = " + no );
            
            // 서버에 생성된 질의 결과를 한개씩 가져 온다.

            if (rs.next()) {
                Student mgr = new Student();
                mgr.setNo(rs.getInt("mno"));
                mgr.setEmail(rs.getString("email"));
                mgr.setName(rs.getString("name"));
                mgr.setTel(rs.getString("tel"));
                mgr.setSchool(rs.getString("schl"));
                mgr.setWorking((rs.getString("work")=="Y"?true:false));
                return mgr;
            }

            return null;
        }catch(Exception e) {

            throw new DaoException(e);
        }finally {
            try {rs.close();} catch (SQLException e) {}
            try {stmt.close();} catch (SQLException e) {}
            try {con.close();} catch (SQLException e) {}
        }
    }
    
    public int delete(String email) {return 0;}
    public int deleteByNo(int no) {
        
        Connection con = null;
        Statement stmt = null;

        try {
            
            Class.forName("org.mariadb.jdbc.Driver");
            con =  DriverManager.getConnection(
                    "jdbc:mariadb://localhost:3306/studydb",
                    "study","1111");
            
            con.setAutoCommit(false);
            
            stmt = con.createStatement();
            String sql = "delete from p1_stud where sno=" + no;
            int count = stmt.executeUpdate(sql);
            
            if (count == 0)
                return 0;
            
            String sql2 = "delete from p1_memb where mno=" + no;
            stmt.executeUpdate(sql2);
            con.commit();
            return 1;

        }catch(Exception e) {
            throw new DaoException(e);
        }finally {

            try {stmt.close();} catch (SQLException e) {}
            try {con.close();} catch (SQLException e) {}
        }
        
    }
}
